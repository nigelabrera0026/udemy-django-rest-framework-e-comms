
Contents of the udemy

1) Implementation of DB
2) Basic Routers, Viewsets and Serializers
3) Testing, end to end and unit Testing
4) Documentation

IMPORTANT NOTES
- The dev environment I am working on is Bash
- Always check version of packages, especially
  if replicating a project.

- Project folder - means the project that contains the whole project
- main project folder - means the django project folder usually pertains when
                        you initialized the django project using django-admin


*** Creating a virtual env for python

$ python3 -m venv venv

# python3: This specifies that Python 3
            should be used to execute the following command.

# -m venv: This tells Python to use the venv module,
            which is a module that comes with Python for
            creating virtual environments.

# venv: This is the name of the directory
        where the virtual environment will be created.
        It's common to name this directory venv as well,
        but you could name it anything you like.

# Activating the env.
$ source venv/bin/activate

# Deactivating the env.
(Make sure you are at least in the root of the proj.)
$ deactivate

* PyPI - This is a python package indexer

*** pip information

* pip - This is a python package installer

# To install
$ pip install {packagename}

# To install from a file
$ pip install -r {filename}.txt

# To upgrade a package
$ pip install --upgrade {packagename}

# To uninstall a package
$ pip uninstall {packagename}

# To list packages that are installed
$ pip list { packagename }

# To replicate the packages that are installed and saving it.
$ pip freeze > {filename}.txt


*** Installation of Django

# Check PyPI on how to install Django but usually it is this.
$ pip install Django=={version}

*** Starting a django project

# To start a project
$ django-admin startproject {projectname} .

# django-admin - to interact with Django
# startproject - Command to start the project

# To start the django server
$ python3 manage.py runserver

*** Creating a new django application

# Starting a new application
$ python3 manage.py startapp {foldername}

or

$ ./manage.py startapp {foldername}

# Usually creating a core app handles sub apps where you
  create other apps such as Product app, Checkout app, Customer app etc.

*** Registering Django project
# Always register the new application that has been initialized
  inside the main app project settings.py, You will add it in the
  INSTALLED_APPS array


*** Starting Django Development server
$ ./manage.py runserver

# This is only good for development but not for deployment
# it needs other package to run when it needs to start for deployment.

# Changing loopback port
$ ./manage.py runserver {port number}

*** Django Request-Response Cycle
// Get image from udemy.

*** Migration

# Migrates DB changes to the server
$ ./manage.py migrate

*** Defining routes(urls)

# Inside your core proj. urls.py, you can add specific paths
  the format are usually.
` path("{pathname}", {views})`

# Including other url paths from other apps
` path("{pathname}", include('{appname}.urls'))`

*** installing requirements.txt from an exisiting django project
$ pip install -r requirements.txt

*** Implementing a secret key

# First start the python shell
$ python3 manage.py shell

# Check django github for library sources and implement it in the
# Python shell

$ from django.core.management.utils import get_random_secret_key

*** Environment Variables
# Using dotenv for handling and managing environment Variables


*** drf-spectacular

*** Implementing Test using Pytest
# create a pytest.ini in the project root folder

*** Serializers, it transpose django data or python objects into JSON for client side rendering

*** Creating a superuser
$ ./manage.py createsuperuser




*** Using DRF spectacular to control serializers and other shit

# Install drf-spectacular
$ pip install drf-spectacular

# Configure base.py to initialize drf_spectacular
# Generate the yaml file from spectacular
$ ./manage.py spectacular --file schema.yml


*** Running coverage for pytest
$ coverage run -m pytest

*** Installing pytest-cov and using it

# To run the test for coverage
$ coverage run -m Pytest

# To generate a htmml for coverage, ( To see the what needs to be tested)
$ coverage htmml

# install pytest-coverage and to see the cli version instead of the html
$ coverage run -m pytest
or
$ pytest --cov

*** Testing

# Unit Testing
  - Unit test is a way of testing a unit
  - Definition of a unit could be anything from a line of code, a function or smaller.
  - Should  be isolated
  - A class or function that has an expected behavioir can be tested on a unit test

  # Unit test could coverage
    - Models(Methods/Managers)
    - URL Configurations
    - View/Viewset
    - Serializers


# End to End test
  - Testing the behavioral flow of the software, from start to end.
  - Those test could look like an API Endpoints


# Most common test structure is AAA (Arrange, Act, Assert)
# Arrange - Gathering all the resources together and isoalate the tools needed
# Act     - Perform an action to utilize the code that we are testing
# Assert  - Test if the outcome of the test is actually what's expected.
